buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://sizableshrimp.me/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

/*plugins {
    id "wtf.gofancy.fancygradle" version "1.0.1"
}*/

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = '1.2'
group = 'com.floweytf.bettercreativeitems' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'bettercreativeitems'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
    accessTransformer = file('src/main/resources/META-INF/better_creative_items_at.cfg')
}

sourceSets {
    api {
        java {
            srcDirs = ["src/api/java"]
        }
    }
    main {
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
    }
}

dependencies {
    implementation sourceSets.api.output
    implementation 'org.jetbrains:annotations:20.1.0'
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
}

configurations {
    apiCompile.extendsFrom(compile)
}

sourceSets.main.java.srcDir file("src/api/java")

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
            "Specification-Title": "better-creative-items",
            "Specification-Vendor": "FloweyTF",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"FloweyTF",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLAT": "better_creative_items_at.cfg"
        ])
    }
}

jar.finalizedBy('reobfJar')

task apiJar(type: Jar) {
    group = 'build'
    classifier = 'api'
    from sourceSets.api.output
    from sourceSets.main.allJava
}

Properties props = new Properties()
def propFile = file('login.properties')
def un = ""
def pwd = ""
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('password') && props.containsKey('username')) {
        un = props['username']
        pwd = props['password']
    }
}

System.out.println("Running with " + un+ ", password: " + pwd);

publishing {
    publications {
        myLibrary(MavenPublication) {
            version = '1.0'
            artifactId = 'api'
            from components.java
            artifact apiJar
        }
    }

    repositories {
        maven {
            url = 'http://maven.floweytf.com/releases/'
            credentials {
                username = un
                password = pwd
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
